name: Benchmark Bot

env:
  DEFAULT_OPPONENT: EvilBot
  DEFAULT_JOBS: 20
  DEFAULT_FENS: 100

on:
  push:
    branches:
      - main

  pull_request:
    types: [opened, synchronize, reopened]

  issue_comment:
    types: [created]

  workflow_dispatch:
    inputs:
      opponent:
        description: 'Opponent'
        required: true
        default: EvilBot
      jobs:
        description: 'Jobs'
        required: true
        default: 20
      fens:
        description: 'Fens'
        required: true
        default: 100
      env:
        description: 'Environment variables to set'
        required: false

permissions:
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:

  prepare:
    runs-on: ubuntu-latest

    outputs:
      opponent: ${{ steps.output.outputs.opponent }}
      fens: ${{ steps.output.outputs.fens }}
      jobs: ${{ steps.output.outputs.jobs }}
      env: ${{ steps.output.outputs.env }}
      opponent_long: ${{ steps.output.outputs.opponent_long }}
      remote_opponent: ${{ steps.output.outputs.remote_opponent }}
      benchmark: ${{ steps.output.outputs.benchmark || false }}

    steps:

      - name: Prepare (Dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          export OPPONENT=${{ github.event.inputs.opponent }}
          export FENS=${{ github.event.inputs.fens }}
          export JOBS=${{ github.event.inputs.jobs }}
          export ENV=${{ github.event.inputs.env }}

      - name: Checkout code
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Prepare (Push & PR)
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: |
          # get last commit message
          commit_message=$(git log -1 --pretty=%B)
          export OPPONENT=$(echo commit_message | grep -oP 'opponent::\K\w+')
          export FENS=$(echo commit_message | grep -oP 'fens::\K\d+')
          export JOBS=$(echo commit_message | grep -oP 'jobs::\K\d+')
          export ENV=$(echo commit_message | grep -oP 'env::\K\S+')

      - name: Set defaults
        run: |
          if [[ -z "$OPPONENT" ]]; then
            export OPPONENT=${{ env.DEFAULT_OPPONENT }}
          fi
          if [[ -z "$FENS" ]]; then
            export FENS=${{ env.DEFAULT_FENS }}
          fi
          if [[ -z "$JOBS" ]]; then
            export JOBS=${{ env.DEFAULT_JOBS }}
          fi

      - name: Output
        id: output
        run: |
          echo "benchmark=true" >> GITHUB_OUTPUT
          echo "opponent=$OPPONENT"
          echo "opponent=$OPPONENT" >> GITHUB_OUTPUT
          echo "fens=$FENS"
          echo "fens=$FENS" >> GITHUB_OUTPUT
          echo "jobs=$JOBS"
          echo "jobs=$JOBS" >> GITHUB_OUTPUT

          OPPONENT_LONG=$OPPONENT
          if [[ $OPPONENT = Stockfish_* ]]; then
            LEVEL=$(echo $OPPONENT | grep -oP 'Stockfish_\K\d+' || echo 0)
            ENV="$ENV:STOCKFISH_LEVEL=$LEVEL"

            OPPONENT_LONG="Stockfish ($LEVEL)"
          elif [[ $OPPONENT = Stockfish ]]; then
            ENV="$ENV:STOCKFISH_LEVEL=0"
            OPPONENT_LONG="Stockfish (0)"
          fi

          echo "opponent_long=$OPPONENT_LONG"
          echo "opponent_long=$OPPONENT_LONG" >> GITHUB_OUTPUT
          echo "env=$ENV"
          echo "env=$ENV" >> GITHUB_OUTPUT

          REMOTE_OPPONENT=$(wget -q $OPPONENT && echo true || echo false)
          echo "remote_opponent=$REMOTE_OPPONENT"
          echo "remote_opponent=$REMOTE_OPPONENT" >> GITHUB_OUTPUT




  benchmark:
    needs: prepare
    if: fromJSON(needs.prepare.outputs.benchmark)
    uses: ./.github/workflows/benchmark.yaml
    with:
      opponent: ${{ needs.prepare.outputs.opponent }}
      opponent_long: ${{ needs.prepare.outputs.opponent_long }}
      jobs: ${{ fromJSON(needs.prepare.outputs.jobs) }}
      fens: ${{ fromJSON(needs.prepare.outputs.fens) }}
      run: echo "${{ needs.prepare.outputs.env }}" >> $GITHUB_ENV
      remote_opponent: ${{ fromJSON(needs.prepare.outputs.remote_opponent) }}

  publish:
    needs:
      - prepare
      - benchmark
    uses: ./.github/workflows/publish.yaml
    with:
      opponent: ${{ needs.prepare.outputs.opponent_long }}
      wins: ${{ fromJSON(needs.benchmark.outputs.wins) }}
      draws: ${{ fromJSON(needs.benchmark.outputs.draws) }}
      losses: ${{ fromJSON(needs.benchmark.outputs.losses) }}

  # stockfish:
  #   uses: ./.github/workflows/benchmark-publish.yaml
  #   strategy:
  #     matrix:
  #       level: [2]
  #   with:
  #     opponent: Stockfish
  #     opponent_long: Stockfish (${{ matrix.level }})
  #     threads: 1
  #     jobs: 40
  #     fens: 100
  #     run: |
  #       cd Chess-Challenge
  #       wget -nv https://github.com/official-stockfish/Stockfish/releases/download/sf_16/stockfish-ubuntu-x86-64-avx2.tar
  #       tar -xf stockfish-ubuntu-x86-64-avx2.tar
  #       echo "STOCKFISH_BIN=stockfish/stockfish-ubuntu-x86-64-avx2" >> $GITHUB_ENV
  #       echo "STOCKFISH_LEVEL=${{ matrix.level }}" >> $GITHUB_ENV
  #
  # comparebot:
  #   if: false
  #   uses: ./.github/workflows/benchmark-publish.yaml
  #   with:
  #     opponent: CompareBot
  #     threads: 1
  #     jobs: 20
