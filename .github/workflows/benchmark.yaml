name: Benchmark MyBot

on:
  workflow_call:
    inputs:
      opponent:
        required: true
        type: string
      threads:
        required: true
        type: number
      run:
        required: false
        type: string
    outputs:
      wins:
        description: number of wins
        value: ${{ jobs.combine_results.outputs.wins }}
      draws:
        description: number of draws
        value: ${{ jobs.combine_results.outputs.draws }}
      losses:
        description: number of losses
        value: ${{ jobs.combine_results.outputs.losses }}

  workflow_dispatch:
    inputs:
      opponent:
        required: true
        type: string
      threads:
        required: true
        type: number
      run:
        required: false
        type: string

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      lines: ${{ steps.calculate.outputs.lines }}
      chunks: ${{ steps.calculate.outputs.chunks }}
      offset: ${{ steps.calculate.outputs.offset }}
    env:
      THREADS: ${{ inputs.threads }}
      OPPONENT: ${{ inputs.opponent }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Calculate chunking parameters
      id: calculate
      run: |
        LINES=$(wc -l < Chess-Challenge/resources/Fens.txt)
        OFFSET=$((LINES / THREADS + (LINES % THREADS != 0)))
        CHUNKS=$(seq 0 $((THREADS-1)) | tr '\n' ',' | sed 's/,$//')
        CHUNKS="[$CHUNKS]"
        echo "::notice title=Benchmark against $OPPONENT::$LINES FENs, $THREADS threads, $OFFSET FENs per thread"
        echo "::notice title=Chunks::$CHUNKS"
        echo "chunks=$CHUNKS" >> $GITHUB_OUTPUT
        echo "offset=$OFFSET" >> $GITHUB_OUTPUT
        echo "lines=$LINES" >> $GITHUB_OUTPUT

  benchmark:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chunk: ${{ fromJson(needs.prepare.outputs.chunks) }}
    env:
      OFFSET: ${{ needs.prepare.outputs.offset }}
      OPPONENT: ${{ inputs.opponent }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'

    - name: Prepare
      run: ${{ inputs.run }}

    - name: Benchmark against ${{ inputs.opponent }}
      run: |
        cd Chess-Challenge
        START_LINE=$(( ${{ matrix.chunk }} * $OFFSET + 1 ))
        END_LINE=$(( $START_LINE + $OFFSET - 1 ))
        sed -n "${START_LINE},${END_LINE}p" resources/Fens.txt > temp.txt
        dotnet run $OPPONENT > output.log &
        DOTNET_PID=$!
        while ! grep -q "Match finished:" output.log; do sleep 1; done
        kill $DOTNET_PID
        WINS=$(grep -oP 'Match finished: \+\K\d+' output.log)
        DRAWS=$(grep -oP 'Match finished: \+\d+ =\K\d+' output.log)
        LOSSES=$(grep -oP 'Match finished: \+\d+ =\d+ -\K\d+' output.log)
        cd ..
        echo "+$WINS =$DRAWS -$LOSSES" > res_${{ matrix.chunk }}.txt

    - name: Upload result
      uses: actions/upload-artifact@v3
      with:
        name: res
        path: res_${{ matrix.chunk }}.txt

  combine_results:
    needs: benchmark
    runs-on: ubuntu-latest
    outputs:
      wins: ${{ steps.combine.outputs.wins }}
      draws: ${{ steps.combine.outputs.draws }}
      losses: ${{ steps.combine.outputs.losses }}

    steps:
    - name: Download results
      uses: actions/download-artifact@v3

    - name: Combine results
      id: combine
      run: |
        wins=0
        draws=0
        losses=0
        for file in res/*; do
          RESULT=$(cat $file)
          wins=$((wins + $(echo $RESULT | grep -oP '\+\K\d+')))
          draws=$((draws + $(echo $RESULT | grep -oP '=\K\d+')))
          losses=$((losses + $(echo $RESULT | grep -oP '\-\K\d+')))
        done
        echo "wins=$wins" >> $GITHUB_OUTPUT
        echo "draws=$draws" >> $GITHUB_OUTPUT
        echo "losses=$losses" >> $GITHUB_OUTPUT
        echo "::notice title=Result::$wins wins, $draws draws, $losses losses"
